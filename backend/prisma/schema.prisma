generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  username           String              @unique
  firstName          String
  lastName           String?
  phone              String?
  role               UserRole            @default(CLIENT)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  brands             Brand[]
  passwordResetCodes PasswordResetCode[]
  userBrands         UserBrand[]
  uploadedFiles File[] @relation("UploadedFiles")

  clientAppointments  Appointment[] @relation("ClientAppointments")
  createdAppointments Appointment[] @relation("CreatedAppointments")

  clientNotes         ClientNote[]       @relation("ClientNotes")
  createdNotes        ClientNote[]       @relation("NoteCreator")
  clientActivities    ClientActivity[]

  @@map("users")
}

model Brand {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?
  address             String?
  phone               String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ownerId             Int
  businessType        String?
  selectedFeatures    String[]
  appointmentSettings AppointmentSettings?
  brandFeatures       BrandFeature[]
  brandPlans          BrandPlan[]
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  businessHours       BusinessHours[]
  colorPalette        ColorPalette?
  payments            Payment[]
  specialHours        SpecialHours[]
  userBrands          UserBrand[]
  appointments        Appointment[]
  clientNotes         ClientNote[]
  clientActivities    ClientActivity[]

  @@map("brands")
}

model UserBrand {
  id           Int      @id @default(autoincrement())
  passwordHash String
  salt         String   @unique
  isActive     Boolean  @default(true)
  notes        String?  @db.Text        // Notas generales del cliente
  tags         String[] @default([])    // Etiquetas del cliente (VIP, Frecuente, etc.)
  preferences  Json?                    // Preferencias del cliente (servicios favoritos, horarios, etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int
  brandId      Int
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("user_brands")
}

model ColorPalette {
  id        Int      @id @default(autoincrement())
  primary   String
  secondary String
  accent    String
  neutral   String
  success   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brandId   Int      @unique
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("color_palettes")
}

model PasswordResetCode {
  id        String   @id @default(cuid())
  code      String
  userId    Int
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([userId])
  @@index([email])
  @@map("password_reset_codes")
}

model Plan {
  id          Int         @id @default(autoincrement())
  type        PlanType    @unique
  name        String
  description String?
  basePrice   Decimal     @default(0) @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  brandPlans  BrandPlan[]

  @@map("plans")
}

model Feature {
  id            Int             @id @default(autoincrement())
  key           String          @unique
  description   String
  price         Decimal         @default(0) @db.Decimal(10, 2)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  businessTypes String[]
  category      FeatureCategory
  isPopular     Boolean         @default(false)
  isRecommended Boolean         @default(false)
  order         Int             @default(0)
  subtitle      String?
  title         String
  brandFeatures BrandFeature[]

  @@map("features")
}

model BrandPlan {
  id            Int           @id @default(autoincrement())
  brandId       Int
  planId        Int
  billingPeriod BillingPeriod @default(monthly)
  price         Decimal       @db.Decimal(10, 2)
  startDate     DateTime      @default(now())
  endDate       DateTime?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  brand         Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  plan          Plan          @relation(fields: [planId], references: [id])
  payments      Payment[]

  @@map("brand_plans")
}

model BusinessType {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  title       String
  subtitle    String?
  description String
  icon        String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("business_types")
}

model BrandFeature {
  id        Int      @id @default(autoincrement())
  brandId   Int
  featureId Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  feature   Feature  @relation(fields: [featureId], references: [id])

  @@unique([brandId, featureId])
  @@map("brand_features")
}

model Payment {
  id                   Int           @id @default(autoincrement())
  brandId              Int
  brandPlanId          Int
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("CRC")
  status               PaymentStatus @default(pending)
  paymentMethod        String?
  tilopayTransactionId String?       @unique
  tilopayReference     String?
  metadata             Json?
  processedAt          DateTime?
  failureReason        String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  brand                Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandPlan            BrandPlan     @relation(fields: [brandPlanId], references: [id])

  @@index([brandId])
  @@index([status])
  @@map("payments")
}

model BusinessHours {
  id        Int      @id @default(autoincrement())
  brandId   Int
  dayOfWeek Int
  isOpen    Boolean  @default(true)
  openTime  String?
  closeTime String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, dayOfWeek])
  @@map("business_hours")
}

model SpecialHours {
  id          Int      @id @default(autoincrement())
  brandId     Int
  date        DateTime
  isOpen      Boolean  @default(false)
  openTime    String?
  closeTime   String?
  reason      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, date])
  @@map("special_hours")
}

model AppointmentSettings {
  id                     Int      @id @default(autoincrement())
  brandId                Int      @unique
  defaultDuration        Int      @default(30)
  bufferTime             Int      @default(5)
  maxAdvanceBookingDays  Int      @default(30)
  minAdvanceBookingHours Int      @default(2)
  allowSameDayBooking    Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  brand                  Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("appointment_settings")
}

model File {
  id          Int      @id @default(autoincrement())
  name        String   // Nombre original del archivo
  url         String   // URL completa de MinIO
  key         String   @unique // Key único en MinIO (path completo)
  contentType String   // MIME type (image/jpeg, application/pdf, etc.)
  fileType    String   // Tipo lógico (logo, isotipo, imagotipo, document, etc.)
  size        Int?     // Tamaño en bytes
  entityId    Int      // ID de la entidad relacionada
  entityType  String   // Tipo de entidad (brand, user, etc.)
  uploadedBy  Int?     // ID del usuario que subió el archivo
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  uploader    User?    @relation("UploadedFiles", fields: [uploadedBy], references: [id])
  @@map("files")
}

model Appointment {
  id          Int              @id @default(autoincrement())
  brandId     Int
  clientId    Int?
  createdById Int
  startTime   DateTime
  endTime     DateTime
  duration    Int              // en minutos
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  brand       Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  client      User?            @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade)
  createdBy   User             @relation("CreatedAppointments", fields: [createdById], references: [id], onDelete: Cascade)
  
  @@index([brandId, startTime])
  @@index([clientId])
  @@index([createdById])
  @@index([status])
}

model ClientNote {
  id          Int      @id @default(autoincrement())
  clientId    Int      // ID del cliente (User)
  brandId     Int      // ID del brand
  note        String   @db.Text
  isPrivate   Boolean  @default(false) // Solo visible para admins
  createdBy   Int      // ID del usuario que creó la nota
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  client      User     @relation("ClientNotes", fields: [clientId], references: [id], onDelete: Cascade)
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  creator     User     @relation("NoteCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([clientId, brandId])
  @@index([createdBy])
  @@map("client_notes")
}

model ClientActivity {
  id          Int            @id @default(autoincrement())
  clientId    Int            // ID del cliente
  brandId     Int            // ID del brand
  type        ActivityType   // Tipo de actividad
  description String         // Descripción de la actividad
  metadata    Json?          // Datos adicionales
  ipAddress   String?        // IP del cliente (para tracking)
  userAgent   String?        // User agent del navegador
  createdAt   DateTime       @default(now())
  
  // Relaciones
  client      User           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  brand       Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  @@index([clientId, brandId])
  @@index([type])
  @@index([createdAt])
  @@map("client_activities")
}

enum ActivityType {
  // Citas
  APPOINTMENT_CREATED
  APPOINTMENT_MODIFIED
  APPOINTMENT_CANCELLED
  APPOINTMENT_COMPLETED
  APPOINTMENT_NO_SHOW
  
  // Pagos
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  
  // Perfil
  PROFILE_CREATED
  PROFILE_UPDATED
  PASSWORD_CHANGED
  EMAIL_VERIFIED
  
  // Interacciones
  NOTE_ADDED
  REVIEW_SUBMITTED
  RATING_GIVEN
  
  // Hitos
  FIRST_VISIT
  MILESTONE_10_VISITS
  MILESTONE_25_VISITS
  MILESTONE_50_VISITS
  MILESTONE_100_VISITS
  
  // Sistema
  LOGIN
  LOGOUT
  ACCOUNT_ACTIVATED
  ACCOUNT_DEACTIVATED
}
enum UserRole {
  ROOT
  CLIENT
  ADMIN
}

enum PlanType {
  web
  app
  complete
}

enum BillingPeriod {
  monthly
  annual
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  cancelled
}

enum FeatureCategory {
  ESSENTIAL
  BUSINESS
  ADVANCED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}