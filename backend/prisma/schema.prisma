generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String
  username           String              @unique
  firstName          String?
  lastName           String?
  role               UserRole            @default(CLIENT)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  brands             Brand[]
  passwordResetCodes PasswordResetCode[]
  userBrands         UserBrand[]

  @@map("users")
}

model Brand {
  id               Int            @id @default(autoincrement())
  name             String
  description      String?
  address          String?
  phone            String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ownerId          Int
  businessType     String?
  selectedFeatures String[]
  imagotipoUrl     String?
  isotopoUrl       String?
  logoUrl          String?
  brandFeatures    BrandFeature[]
  brandPlans       BrandPlan[]
  owner            User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  colorPalette     ColorPalette?
  payments         Payment[]
  userBrands       UserBrand[]

  @@map("brands")
}

model UserBrand {
  id           Int      @id @default(autoincrement())
  email        String
  passwordHash String
  salt         String   @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int
  brandId      Int
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("user_brands")
}

model ColorPalette {
  id        Int      @id @default(autoincrement())
  primary   String
  secondary String
  accent    String
  neutral   String
  success   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brandId   Int      @unique
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("color_palettes")
}

model PasswordResetCode {
  id        String   @id @default(cuid())
  code      String
  userId    Int
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([userId])
  @@index([email])
  @@map("password_reset_codes")
}

model Plan {
  id          Int         @id @default(autoincrement())
  type        PlanType    @unique
  name        String
  description String?
  basePrice   Decimal     @default(0) @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  brandPlans  BrandPlan[]

  @@map("plans")
}

model Feature {
  id            Int             @id @default(autoincrement())
  key           String          @unique
  description   String
  price         Decimal         @default(0) @db.Decimal(10, 2)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  businessTypes String[]
  category      FeatureCategory
  isPopular     Boolean         @default(false)
  isRecommended Boolean         @default(false)
  order         Int             @default(0)
  subtitle      String?
  title         String
  brandFeatures BrandFeature[]

  @@map("features")
}

model BrandPlan {
  id            Int           @id @default(autoincrement())
  brandId       Int
  planId        Int
  billingPeriod BillingPeriod @default(monthly)
  price         Decimal       @db.Decimal(10, 2)
  startDate     DateTime      @default(now())
  endDate       DateTime?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  brand         Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  plan          Plan          @relation(fields: [planId], references: [id])
  payments      Payment[]

  @@map("brand_plans")
}

model BusinessType {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  title       String
  subtitle    String?
  description String
  icon        String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("business_types")
}

model BrandFeature {
  id        Int      @id @default(autoincrement())
  brandId   Int
  featureId Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  feature   Feature  @relation(fields: [featureId], references: [id])

  @@unique([brandId, featureId])
  @@map("brand_features")
}

model Payment {
  id                   Int           @id @default(autoincrement())
  brandId              Int
  brandPlanId          Int
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("CRC")
  status               PaymentStatus @default(pending)
  paymentMethod        String?
  tilopayTransactionId String?       @unique
  tilopayReference     String?
  metadata             Json?
  processedAt          DateTime?
  failureReason        String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  brand                Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandPlan            BrandPlan     @relation(fields: [brandPlanId], references: [id])

  @@index([brandId])
  @@index([status])
  @@map("payments")
}

enum UserRole {
  ROOT
  CLIENT
  ADMIN
}

enum PlanType {
  web
  app
  complete
}

enum BillingPeriod {
  monthly
  annual
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  cancelled
}

enum FeatureCategory {
  ESSENTIAL
  BUSINESS
  ADVANCED
}
