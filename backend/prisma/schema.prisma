generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ROOT
  CLIENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   // Email principal del usuario (único para ROOT, puede repetirse para CLIENT)
  username  String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordResetCodes PasswordResetCode[] // Cambio de tokens a codes

  // Relaciones
  brands     Brand[]     // Solo para usuarios ROOT - sus marcas white label
  userBrands UserBrand[] // Para usuarios CLIENT, sus asignaciones a marcas

  @@map("users")
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // URLs de logotipos
  logoUrl      String? // Logotipo: nombre de la marca en texto
  isotopoUrl   String? // Isotipo: solo símbolo/ícono sin texto
  imagotipoUrl String? // Imagotipo: símbolo + nombre juntos

  // Relación con el usuario ROOT que es dueño de la marca
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relaciones
  userBrands   UserBrand[]
  colorPalette ColorPalette?

  @@map("brands")
}

model UserBrand {
  id           Int      @id @default(autoincrement())
  email        String   // Email específico para esta marca (puede repetirse entre marcas)
  passwordHash String   // Hash de la contraseña específica para esta marca
  salt         String   @unique // Salt único para fortalecer la autenticación (incluye timestamp)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  // Un usuario puede tener solo una cuenta por marca
  @@unique([userId, brandId])
  @@map("user_brands")
}

model ColorPalette {
  id        Int      @id @default(autoincrement())
  primary   String   // Color primario (hex)
  secondary String   // Color secundario (hex)
  accent    String   // Color de acento (hex)
  neutral   String   // Color neutral (hex)
  success   String   // Color de éxito (hex)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación uno a uno con Brand
  brandId Int   @unique
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("color_palettes")
}

// Nuevo modelo para códigos de restablecimiento
model PasswordResetCode {
  id        String   @id @default(cuid())
  code      String   // Código de 6 dígitos
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String   // Email asociado al código
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0) // Contador de intentos de validación
  createdAt DateTime @default(now())

  @@index([code])
  @@index([userId])
  @@index([email])
  @@map("password_reset_codes")
}